{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Substitute for python standard library function logging.getLogger(), but pre-configured as rich logger.</p> <p>Also makes unhandled errors to be logged with rich traceback.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#install-with-pip","title":"Install with pip","text":"terminal <pre><code>pip install get-rich-logger\n</code></pre>"},{"location":"#install-with-poetry","title":"Install with poetry","text":"terminal <pre><code>poetry add get-rich-logger\n</code></pre>"},{"location":"example/","title":"Example Usage","text":"Python <pre><code>import logging\nfrom get_rich_logger import getRichLogger\n\nlogger: logging.Logger = getRichLogger(  # (1)\n    logging_level=\"DEBUG\",\n    logger_name=__name__,\n)\n\ntry:\n    1 / 0\nexcept Exception as e:\n    logger.exception(\n        \"This is an example rich logger error message for handled\"\n        f\"exception! Error: {e}\"\n    )\n</code></pre> <ol> <li>Instantiate rich logger</li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>get_rich_logger</li> </ul>"},{"location":"reference/get_rich_logger/","title":"get_rich_logger","text":""},{"location":"reference/get_rich_logger/#get_rich_logger.getRichLogger","title":"<code>getRichLogger(level='NOTSET', name=None, format='%(message)s', traceback_show_locals=False, traceback_hide_dunder_sunder_locals=True, traceback_extra_lines=10, traceback_suppressed_modules=(), **logging_basic_config_extra_kwargs)</code>","text":"<p>Substitute for logging.getLogger(), but pre-configured as rich logger with rich traceback.</p> PARAMETER  DESCRIPTION <code>level</code> <p>The logging level to use. Valid values include \"DEBUG\", 10, \"INFO\", 20, \"WARNING\", 30, \"ERROR\", 40, \"CRITICAL\", 50.</p> <p> TYPE: <code>_Level</code> DEFAULT: <code>'NOTSET'</code> </p> <code>name</code> <p>The name of the logger. Recommended to use <code>__name__</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>format</code> <p>The format string to use for the rich logger.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'%(message)s'</code> </p> <code>traceback_show_locals</code> <p>Whether to show local variables in tracebacks.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>traceback_hide_dunder_sunder_locals</code> <p>Whether to hide dunder and sunder variables in tracebacks. Only applicable to unhandled errors.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>traceback_extra_lines</code> <p>The number of extra lines to show in tracebacks.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>traceback_suppressed_modules</code> <p>The modules to suppress in tracebacks (e.g., pandas).</p> <p> TYPE: <code>Iterable[ModuleType]</code> DEFAULT: <code>()</code> </p> <code>logging_basic_config_extra_kwargs</code> <p>Extra keyword arguments to pass to logging.basicConfig().</p> <p> TYPE: <code>Unpack[LoggingBasicConfigExtraKwargs]</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Logger</code> <p>The configured logger.</p> RAISES DESCRIPTION <code>TypeError</code> <p>If additional_handlers is not a logging.Handler, Iterable[logging.Handler], or None.</p> <p>Examples:</p> Python <pre><code>import logging\nfrom get_rich_logger import getRichLogger\n\ngetRichLogger(\n    logging_level=\"DEBUG\",\n    logger_name=__name__,\n    traceback_show_locals=True,\n    traceback_extra_lines=10,\n    traceback_suppressed_modules=(),\n)\n\nlogging.debug(\"This is a rich debug message!\")  # (1)\n\n1/0  # (2)\n</code></pre> <ol> <li>Logs will be colored and formatted with rich.</li> <li>Unhandled errors will have rich traceback.</li> </ol> Source code in <code>src\\get_rich_logger\\_logger.py</code> <pre><code>def getRichLogger(\n    level: _Level = \"NOTSET\",\n    name: str | None = None,\n    format: str = \"%(message)s\",\n    traceback_show_locals: bool = False,\n    traceback_hide_dunder_sunder_locals: bool = True,\n    traceback_extra_lines: int = 10,\n    traceback_suppressed_modules: Iterable[ModuleType] = (),\n    **logging_basic_config_extra_kwargs: Unpack[LoggingBasicConfigExtraKwargs],\n) -&gt; logging.Logger:\n    \"\"\"\n    Substitute for [logging.getLogger()](https://docs.python.org/3/library/logging.html),\n    but pre-configured as rich logger with rich traceback.\n\n    Parameters\n    ----------\n    level : _Level, optional\n        The logging level to use.\n        Valid values include \"DEBUG\", 10, \"INFO\", 20, \"WARNING\", 30,\n        \"ERROR\", 40, \"CRITICAL\", 50.\n    name : str, optional\n        The name of the logger. Recommended to use `__name__`.\n    format : str, optional\n        The format string to use for the rich logger.\n    traceback_show_locals : bool, optional\n        Whether to show local variables in tracebacks.\n    traceback_hide_dunder_sunder_locals : bool, optional\n        Whether to hide dunder and sunder variables in tracebacks.\n        Only applicable to unhandled errors.\n    traceback_extra_lines : int, optional\n        The number of extra lines to show in tracebacks.\n    traceback_suppressed_modules : Iterable[ModuleType], optional\n        The modules to suppress in tracebacks (e.g., pandas).\n    logging_basic_config_extra_kwargs : Unpack[LoggingBasicConfigExtraKwargs], optional\n        Extra keyword arguments to pass to [logging.basicConfig()](https://docs.python.org/3/library/logging.html#logging.basicConfig).\n\n    Returns\n    -------\n    logging.Logger\n        The configured logger.\n\n    Raises\n    ------\n    TypeError\n        If additional_handlers is not a logging.Handler,\n        Iterable[logging.Handler], or None.\n\n    Examples\n    --------\n    === \"Python\"\n        ``` python linenums=\"1\"\n        import logging\n        from get_rich_logger import getRichLogger\n\n        getRichLogger(\n            logging_level=\"DEBUG\",\n            logger_name=__name__,\n            traceback_show_locals=True,\n            traceback_extra_lines=10,\n            traceback_suppressed_modules=(),\n        )\n\n        logging.debug(\"This is a rich debug message!\")  # (1)\n\n        1/0  # (2)\n        ```\n\n        1.  Logs will be colored and formatted with rich.\n        2.  Unhandled errors will have rich traceback.\n\n    \"\"\"\n\n    # install rich traceback for unhandled exceptions\n    traceback.install(\n        extra_lines=traceback_extra_lines,\n        theme=\"monokai\",\n        show_locals=traceback_show_locals,\n        locals_hide_dunder=traceback_hide_dunder_sunder_locals,\n        locals_hide_sunder=traceback_hide_dunder_sunder_locals,\n        suppress=traceback_suppressed_modules,\n    )\n\n    # configure the rich handler\n    rich_handler: logging.Handler = RichHandler(\n        level=logging.getLevelName(level),\n        omit_repeated_times=False,\n        rich_tracebacks=True,\n        tracebacks_extra_lines=traceback_extra_lines,\n        tracebacks_theme=\"monokai\",\n        tracebacks_word_wrap=False,\n        tracebacks_show_locals=traceback_show_locals,\n        tracebacks_suppress=traceback_suppressed_modules,\n        log_time_format=\"[%Y-%m-%d %H:%M:%S] \",\n    )\n\n    logging.basicConfig(\n        level=logging.getLevelName(level),\n        format=format,\n        handlers=[rich_handler],\n        **logging_basic_config_extra_kwargs,\n    )\n\n    return logging.getLogger(name)\n</code></pre>"}]}